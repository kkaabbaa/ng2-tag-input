import { ElementRef, EventEmitter, Renderer, OnInit } from '@angular/core';
import { TagInputAccessor } from './helpers/accessor';
import { TagInputForm } from './tag-input-form/tag-input-form.component';
export declare class TagInputComponent extends TagInputAccessor implements OnInit {
    private element;
    private renderer;
    separatorKeys: number[];
    placeholder: string;
    secondaryPlaceholder: string;
    maxItems: number;
    readonly: boolean;
    transform: (item: string) => string;
    validators: any[];
    autocomplete: boolean;
    autocompleteItems: string[];
    onlyFromAutocomplete: boolean;
    errorMessages: {
        [key: string]: string;
    };
    theme: string;
    onAdd: EventEmitter<string>;
    onRemove: EventEmitter<string>;
    onSelect: EventEmitter<string>;
    onFocus: EventEmitter<string>;
    onBlur: EventEmitter<string>;
    template: ElementRef;
    dropdown: any;
    inputForm: TagInputForm;
    itemsMatching: string[];
    selectedTag: string;
    private tagElements;
    private listeners;
    constructor(element: ElementRef, renderer: Renderer);
    removeItem(item: string): void;
    addItem(isFromAutocomplete?: boolean): void;
    selectItem(item: string): void;
    fireEvents(eventName: string, $event?: any): void;
    handleKeydown($event: any, item: string): void;
    private setInputValue(value, isTransform?);
    private getControl();
    focus(applyFocus?: boolean): void;
    blur(): void;
    hasErrors(): boolean;
    isInputFocused(): boolean;
    private readonly maxItemsReached;
    private hasCustomTemplate();
    ngOnInit(): void;
    ngAfterViewChecked(): void;
    ngAfterViewInit(): void;
}
